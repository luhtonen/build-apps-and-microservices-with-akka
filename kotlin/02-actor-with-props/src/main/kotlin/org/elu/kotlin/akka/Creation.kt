/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.elu.kotlin.akka

import akka.actor.AbstractActor
import akka.actor.ActorRef
import akka.actor.ActorSystem
import akka.actor.Props
import akka.japi.pf.ReceiveBuilder

sealed class ControllerMsg
object Play : ControllerMsg()
object Stop : ControllerMsg()

class MusicController : AbstractActor() {
    override fun createReceive(): Receive =
        ReceiveBuilder()
            .match(ControllerMsg::class.java, this::onMessage)
            .build()

    private fun onMessage(message: ControllerMsg) =
        when (message) {
            Play -> println("Music started .....")
            Stop -> println("Music stopped .....")
        }

    companion object {
        val props: Props = Props.create(MusicController::class.java)
    }
}

sealed class PlayMsg
object StartMusic : PlayMsg()
object StopMusic : PlayMsg()

class MusicPlayer : AbstractActor() {
    override fun createReceive(): Receive =
        ReceiveBuilder()
            .match(PlayMsg::class.java, this::onMessage)
            .build()

    private fun onMessage(msg: PlayMsg) =
        when(msg) {
            StopMusic -> println("I don't want to stop music")
            StartMusic -> {
                val controller = context.actorOf(MusicController.props, "musicController")
                controller.tell(Play, ActorRef.noSender())
            }
        }
}

fun main() {
    val system = ActorSystem.create("creation")
    val player = system.actorOf(Props.create(MusicPlayer::class.java), "player")
    player.tell(StartMusic, ActorRef.noSender())

    player.tell(StopMusic, ActorRef.noSender())
    system.terminate()
}
