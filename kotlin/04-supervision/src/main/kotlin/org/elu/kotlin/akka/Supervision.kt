/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.elu.kotlin.akka

import akka.actor.AbstractActor
import akka.actor.ActorRef
import akka.actor.ActorSystem
import akka.actor.OneForOneStrategy
import akka.actor.Props
import akka.actor.SupervisorStrategy
import akka.japi.pf.ReceiveBuilder
import scala.concurrent.duration.Duration
import java.util.*
import java.util.concurrent.TimeUnit

class ResumeException : Exception()
class RestartException : Exception()
class StopException : Exception()

class Aphrodite : AbstractActor() {
    override fun preStart() {
        println("Aphrodite preStart hook...")
    }

    override fun postStop() {
        println("Aphrodite postStop hook...")
    }

    override fun preRestart(reason: Throwable?, message: Optional<Any>?) {
        println("Aphrodite preRestart hook...")
        super.preRestart(reason, message)
    }

    override fun postRestart(reason: Throwable?) {
        println("Aphrodite postRestart hook...")
        super.postRestart(reason)
    }

    override fun createReceive(): Receive =
        ReceiveBuilder()
            .match(String::class.java, this::onMessage)
            .build()

    private fun onMessage(msg: String): Nothing =
        when(msg) {
            "Resume" -> throw ResumeException()
            "Restart" -> throw RestartException()
            "Stop" -> throw StopException()
            else -> throw Exception()
        }
}

class Hera : AbstractActor() {
    private lateinit var childRef: ActorRef

    override fun supervisorStrategy(): SupervisorStrategy =
        OneForOneStrategy(10, Duration.create(100, TimeUnit.SECONDS)) {
            when (it) {
                is ResumeException -> SupervisorStrategy.resume() as SupervisorStrategy.Directive
                is RestartException -> SupervisorStrategy.restart() as SupervisorStrategy.Directive
                is StopException -> SupervisorStrategy.stop() as SupervisorStrategy.Directive
                else -> SupervisorStrategy.escalate() as SupervisorStrategy.Directive
            }
        }

    override fun preStart() {
        childRef = context.actorOf(Props.create(Aphrodite::class.java), "aphrodite")
        Thread.sleep(100)
    }

    override fun createReceive(): Receive =
        ReceiveBuilder()
            .match(String::class.java, this::onMessage)
            .build()

    private fun onMessage(msg: String) {
        println("Hera received $msg")
        childRef.tell(msg, ActorRef.noSender())
        Thread.sleep(100)
    }
}

fun main() {
    val system = ActorSystem.create("supervision")

    val hera = system.actorOf(Props.create(Hera::class.java), "hera")

    hera.tell("Resume", ActorRef.noSender())
    Thread.sleep(1000)
    println()

    hera.tell("Restart", ActorRef.noSender())
    Thread.sleep(1000)
    println()

    hera.tell("Stop", ActorRef.noSender())
    Thread.sleep(1000)
    println()

    system.terminate()
}
